<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2025/01/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>ration.h</title>
    <url>/2025/01/11/ration/</url>
    <content><![CDATA[<h1 id="ration-h-文件内容"><a href="#ration-h-文件内容" class="headerlink" title="ration.h 文件内容"></a>ration.h 文件内容</h1><pre><code class="language-c">#ifndef _RATIONAL_H_
#define _RATIONAL_H_
//  大冰块stupid吗 2025-1-28  //讨论：未央  //指导：袁同学  //协助测试：郦同学
//  这有理库包含分数结构、常量、运算、输入、输出和转化等基本功能。
#include &lt;stdio.h&gt;
#include &lt;limits.h&gt;

//  辅助宏：类型改名，本库认为辅助宏最后必须销毁。
#
#define ll long long
#define ul unsigned long
#define ull unsigned long long
#define lr longrat

//  定义类型rational，三个成员分别是：分子、非负的分母、化简状态。\
//  当splfd(simplified)的值为1时，认为一个rat已经被化简过，此外，\
    您也可以通过将splfd赋值为1来保护一个rat，或者搞破坏。splfd仅\
    1 bit大小，在一个rat 未 初始化时可能导致错误。\
//  rat.down为unsigned类型，请留意补码造成的隐患。
#
struct rat&#123;
    int up; unsigned down: sizeof(int)*8-1; unsigned splfd: 1;
&#125;;  typedef struct rat rat;

//  为了保证longrat的精度比rat高，这里使用条件编译。
#
struct longrat&#123;
#if INT_MAX &lt; LONG_MAX
    long up; ul down: sizeof(long)*8-1; ul splfd: 1;
#else
    ll up; ull down: sizeof(ll)*8-1; ull splfd: 1;
#endif
&#125;;  typedef struct longrat longrat;

//  根据#include本库前是否#define _AUTO_RAT_TYPE_\
    本库分为 手动类型调整 模式 和 自动类型调整 模式。

//  默认模式，\
    即手动类型调整模式，本库对rat和longrat的一切函数参数与返回\
    值进行严格区分，如果想让不同精度rational变量混合传参，必须\
    手动转化，本库提供了转化函数，您当然可以自行写语句做转化。

//  自动类型调整模式，\
    本库中的大量糖衣宏被激活，自动将传入函数的rational类型强行\
    统一，使混合传参（仅rats）成为可能。由于糖衣宏的展开行为，\
    代码中某些只出现 一次 的有理数据 将变得 多次 出现，如果这有\
    理数恰是本库函数的返回值，糖衣宏的展开就会产生不必要的重复\
    调用，拖慢效率并带来隐患（例如一个输入函数因宏展开而被调用\
    多次）。若使用_AUTO_RAT_TYPE_，建议 *回避* 函数的 *嵌套*。

//  定义常量：0、1、分数式的正无穷、负无穷、不定态（即NaN）等，\
    后三个不妨统称无值分数。另外，推荐经常利用(l)rZERO做初始化。
#
const rat      rZERO=&#123;0,1,1&#125;,  rONE=&#123;1,1,1&#125;,  rINF=&#123;1,0,1&#125;,  rNEGINF=&#123;-1,0,1&#125;,  rUNCERTAIN=&#123;0,0,1&#125;;
const longrat  lrZERO=&#123;0,1,1&#125;, lrONE=&#123;1,1,1&#125;, lrINF=&#123;1,0,1&#125;, lrNEGINF=&#123;-1,0,1&#125;, lrUNCERTAIN=&#123;0,0,1&#125;;

//  函数式的长短rat转化。
#
rat torat(lr);
lr tolr(rat);

//  运算：最大公约数、最小公倍数、约分、加、负、减、乘、倒、除、二元运算包、绝对值、比较。
#
ll gcd(ll,ll);          ull lcm(ll,ll);
lr lrsplfy(lr);         rat rsplfy(rat);
lr lrplus(lr,lr);       rat rplus(rat,rat);
lr lrneg(lr);           rat rneg(rat);
lr lrminus(lr,lr);      rat rminus(rat,rat);
lr lrtime(lr,lr);       rat rtime(rat,rat);
lr lrflip(lr);          rat rflip(rat);
lr lrdivi(lr,lr);       rat rdivi(rat,rat);
lr co2lr(lr,char,lr);   rat co2r(rat,char,rat);
lr lrabs(lr);           rat rabs(rat);
signed char lrcmp(lr,lr);
signed char rcmp(rat,rat);

//  输出：分数、指定位数小数、（循环）小数。输入：综合、分数、（循环）小数。转化：到浮点、到整数。
#
char lrap(lr);          char rap(rat);
int fltlrap(lr,int);    int fltrap(rat,int);
ll lrdeci(lr);          int rdeci(rat);
lr getlr();             rat getrat();
lr getlfrac();          rat getfrac();
lr getldeci();          rat getdeci();    
double lrtodb(lr);      double rattodb(rat);
int rattoint(rat);
#if     INT_MAX &lt; LONG_MAX
long    lrtolong(lr);
#else
ll      lrtoll(lr);
#endif

//  辅助宏：输出非负整数(++i)、输出检查、是否空白、是否数码、循环添位、小数添位、输入截停。
#define _putu_ppi_(n,i)&#123;\
    ull ten=1,lv=2,m=n;\
    while(n/=10) ten*=10,++lv;\
    while(--lv)&#123;\
        putchar(m/ten+&#39;0&#39;);\
        m%=ten;ten/=10;++i;&#125;\
&#125;   //  int lv=2;与--lv呼应。
#define _putu_(n)&#123;\
    ull ten=1,lv=2,m=n;\
    while(n/=10) ten*=10,++lv;\
    while(--lv)&#123;\
        putchar(m/ten+&#39;0&#39;);\
        m%=ten;ten/=10;&#125;\
&#125;
#define _rapCHECK1_(q)&#123;\
    if(q.splfd!=1) q=lrsplfy(q);\
    if(!q.down)&#123;\
        switch(q.up)&#123;\
            case -1: fputs(&quot;-inf&quot;,stdout);return 4;\
            case 0: fputs(&quot;NaN&quot;,stdout);return 3;\
            case 1: fputs(&quot;+inf&quot;,stdout);return 4;\
        &#125;\
    &#125;\
&#125;
#define _rapCHECK2_(q)&#123;\
    if(q.splfd!=1) q=lrsplfy(q);\
    if(!q.down)&#123;\
        switch(q.up)&#123;\
            case -1: fputs(&quot;-inf&quot;,stdout);break;\
            case 0: fputs(&quot;NaN&quot;,stdout);break;\
            case 1: fputs(&quot;+inf&quot;,stdout);break;\
        &#125;   return 0;\
    &#125;\
&#125;
#define _isBLANK_(ch) (ch==&#39; &#39;||ch==&#39;\n&#39;||ch==&#39;\t&#39;)
#define _isDIGIT_(ch) (ch&gt;=&#39;0&#39;&amp;&amp;ch&lt;=&#39;9&#39;)
#define _ADD_digit_(n,temp) while(_isDIGIT_(temp)) &#123;n=n*10+temp-&#39;0&#39;; temp=getchar();&#125;
#define _point_ADD_digit_(up,down,temp) while(_isDIGIT_(temp)) &#123;up=up*10+temp-&#39;0&#39;; down*=10; temp=getchar();&#125;
#define _SHOULD_END_1_(q,temp) if(temp!=&#39;/&#39;&amp;&amp;temp!=&#39;.&#39;) &#123;ungetc(temp,stdin); q.up*=pozneg; return q;&#125;
#define _SHOULD_END_2_(q,temp) if(temp!=&#39;(&#39;) &#123;ungetc(temp,stdin); q.up*=pozneg; return q;&#125;
#define _SHOULD_END_3_(q,temp) if(temp!=&#39;/&#39;) &#123;ungetc(temp,stdin); q.up*=pozneg; return q;&#125;
#define _SHOULD_END_4_(q,temp) if(temp!=&#39;.&#39;) &#123;ungetc(temp,stdin); q.up*=pozneg; return q;&#125;

//  函数实现和相关解释说明：
#include &quot;rational.c&quot;
//  请将.h.c放在同一目录下。

#undef ll
#undef ul
#undef ull
#undef lr
#undef _putu_ppi_
#undef _putu_
#undef _rapCHECK1_
#undef _rapCHECK2_
#undef _isBLANK_
#undef _isDIGIT_
#undef _ADD_digit_
#undef _point_ADD_digit_
#undef _SHOULD_END_1_
#undef _SHOULD_END_2_
#undef _SHOULD_END_3_
#undef _SHOULD_END_4_
#endif

#endif // RATION_H
</code></pre>
]]></content>
      <categories>
        <category>C语言库文件</category>
      </categories>
      <tags>
        <tag>分数</tag>
      </tags>
  </entry>
</search>
