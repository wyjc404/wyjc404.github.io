<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ration.h</title>
    <url>/2025/01/11/ration/</url>
    <content><![CDATA[<h1 id="ration-h-文件内容"><a href="#ration-h-文件内容" class="headerlink" title="ration.h 文件内容"></a>ration.h 文件内容</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _RATIONAL_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _RATIONAL_H_</span></span><br><span class="line"><span class="comment">//  大冰块stupid吗 2025-1-28  //讨论：未央  //指导：袁同学  //协助测试：郦同学</span></span><br><span class="line"><span class="comment">//  这有理库包含分数结构、常量、运算、输入、输出和转化等基本功能。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  辅助宏：类型改名，本库认为辅助宏最后必须销毁。</span></span><br><span class="line">#</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ul unsigned long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lr longrat</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  定义类型rational，三个成员分别是：分子、非负的分母、化简状态。\</span></span><br><span class="line"><span class="comment">//  当splfd(simplified)的值为1时，认为一个rat已经被化简过，此外，\</span></span><br><span class="line"><span class="comment">    您也可以通过将splfd赋值为1来保护一个rat，或者搞破坏。splfd仅\</span></span><br><span class="line"><span class="comment">    1 bit大小，在一个rat 未 初始化时可能导致错误。\</span></span><br><span class="line"><span class="comment">//  rat.down为unsigned类型，请留意补码造成的隐患。</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">struct rat&#123;</span></span><br><span class="line">    <span class="type">int</span> up; <span class="type">unsigned</span> down: <span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">8</span><span class="number">-1</span>; <span class="type">unsigned</span> splfd: <span class="number">1</span>;</span><br><span class="line">&#125;;  <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">rat</span> <span class="title">rat</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  为了保证longrat的精度比rat高，这里使用条件编译。</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">struct longrat&#123;</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> INT_MAX &lt; LONG_MAX</span></span><br><span class="line">    <span class="type">long</span> up; ul down: <span class="keyword">sizeof</span>(<span class="type">long</span>)*<span class="number">8</span><span class="number">-1</span>; ul splfd: <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    ll up; ull down: <span class="keyword">sizeof</span>(ll)*<span class="number">8</span><span class="number">-1</span>; ull splfd: <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;  <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">longrat</span> <span class="title">longrat</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  根据#include本库前是否#define _AUTO_RAT_TYPE_\</span></span><br><span class="line"><span class="comment">    本库分为 手动类型调整 模式 和 自动类型调整 模式。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  默认模式，\</span></span><br><span class="line"><span class="comment">    即手动类型调整模式，本库对rat和longrat的一切函数参数与返回\</span></span><br><span class="line"><span class="comment">    值进行严格区分，如果想让不同精度rational变量混合传参，必须\</span></span><br><span class="line"><span class="comment">    手动转化，本库提供了转化函数，您当然可以自行写语句做转化。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  自动类型调整模式，\</span></span><br><span class="line"><span class="comment">    本库中的大量糖衣宏被激活，自动将传入函数的rational类型强行\</span></span><br><span class="line"><span class="comment">    统一，使混合传参（仅rats）成为可能。由于糖衣宏的展开行为，\</span></span><br><span class="line"><span class="comment">    代码中某些只出现 一次 的有理数据 将变得 多次 出现，如果这有\</span></span><br><span class="line"><span class="comment">    理数恰是本库函数的返回值，糖衣宏的展开就会产生不必要的重复\</span></span><br><span class="line"><span class="comment">    调用，拖慢效率并带来隐患（例如一个输入函数因宏展开而被调用\</span></span><br><span class="line"><span class="comment">    多次）。若使用_AUTO_RAT_TYPE_，建议 *回避* 函数的 *嵌套*。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  定义常量：0、1、分数式的正无穷、负无穷、不定态（即NaN）等，\</span></span><br><span class="line"><span class="comment">    后三个不妨统称无值分数。另外，推荐经常利用(l)rZERO做初始化。</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">const rat      rZERO=&#123;0,1,1&#125;,  rONE=&#123;1,1,1&#125;,  rINF=&#123;1,0,1&#125;,  rNEGINF=&#123;-1,0,1&#125;,  rUNCERTAIN=&#123;0,0,1&#125;;</span></span><br><span class="line"><span class="type">const</span> longrat  lrZERO=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;, lrONE=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;, lrINF=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;, lrNEGINF=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;, lrUNCERTAIN=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  函数式的长短rat转化。</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">rat torat(lr);</span></span><br><span class="line">lr <span class="title function_">tolr</span><span class="params">(rat)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  运算：最大公约数、最小公倍数、约分、加、负、减、乘、倒、除、二元运算包、绝对值、比较。</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">ll gcd(ll,ll);          ull lcm(ll,ll);</span></span><br><span class="line">lr <span class="title function_">lrsplfy</span><span class="params">(lr)</span>;         rat <span class="title function_">rsplfy</span><span class="params">(rat)</span>;</span><br><span class="line">lr <span class="title function_">lrplus</span><span class="params">(lr,lr)</span>;       rat <span class="title function_">rplus</span><span class="params">(rat,rat)</span>;</span><br><span class="line">lr <span class="title function_">lrneg</span><span class="params">(lr)</span>;           rat <span class="title function_">rneg</span><span class="params">(rat)</span>;</span><br><span class="line">lr <span class="title function_">lrminus</span><span class="params">(lr,lr)</span>;      rat <span class="title function_">rminus</span><span class="params">(rat,rat)</span>;</span><br><span class="line">lr <span class="title function_">lrtime</span><span class="params">(lr,lr)</span>;       rat <span class="title function_">rtime</span><span class="params">(rat,rat)</span>;</span><br><span class="line">lr <span class="title function_">lrflip</span><span class="params">(lr)</span>;          rat <span class="title function_">rflip</span><span class="params">(rat)</span>;</span><br><span class="line">lr <span class="title function_">lrdivi</span><span class="params">(lr,lr)</span>;       rat <span class="title function_">rdivi</span><span class="params">(rat,rat)</span>;</span><br><span class="line">lr <span class="title function_">co2lr</span><span class="params">(lr,<span class="type">char</span>,lr)</span>;   rat <span class="title function_">co2r</span><span class="params">(rat,<span class="type">char</span>,rat)</span>;</span><br><span class="line">lr <span class="title function_">lrabs</span><span class="params">(lr)</span>;           rat <span class="title function_">rabs</span><span class="params">(rat)</span>;</span><br><span class="line"><span class="type">signed</span> <span class="type">char</span> <span class="title function_">lrcmp</span><span class="params">(lr,lr)</span>;</span><br><span class="line"><span class="type">signed</span> <span class="type">char</span> <span class="title function_">rcmp</span><span class="params">(rat,rat)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  输出：分数、指定位数小数、（循环）小数。输入：综合、分数、（循环）小数。转化：到浮点、到整数。</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">char lrap(lr);          char rap(rat);</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fltlrap</span><span class="params">(lr,<span class="type">int</span>)</span>;    <span class="type">int</span> <span class="title function_">fltrap</span><span class="params">(rat,<span class="type">int</span>)</span>;</span><br><span class="line">ll <span class="title function_">lrdeci</span><span class="params">(lr)</span>;          <span class="type">int</span> <span class="title function_">rdeci</span><span class="params">(rat)</span>;</span><br><span class="line">lr <span class="title function_">getlr</span><span class="params">()</span>;             rat <span class="title function_">getrat</span><span class="params">()</span>;</span><br><span class="line">lr <span class="title function_">getlfrac</span><span class="params">()</span>;          rat <span class="title function_">getfrac</span><span class="params">()</span>;</span><br><span class="line">lr <span class="title function_">getldeci</span><span class="params">()</span>;          rat <span class="title function_">getdeci</span><span class="params">()</span>;    </span><br><span class="line"><span class="type">double</span> <span class="title function_">lrtodb</span><span class="params">(lr)</span>;      <span class="type">double</span> <span class="title function_">rattodb</span><span class="params">(rat)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">rattoint</span><span class="params">(rat)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span>     INT_MAX &lt; LONG_MAX</span></span><br><span class="line"><span class="type">long</span>    <span class="title function_">lrtolong</span><span class="params">(lr)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">ll      <span class="title function_">lrtoll</span><span class="params">(lr)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  辅助宏：输出非负整数(++i)、输出检查、是否空白、是否数码、循环添位、小数添位、输入截停。</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _putu_ppi_(n,i)&#123;\</span></span><br><span class="line"><span class="meta">    ull ten=1,lv=2,m=n;\</span></span><br><span class="line"><span class="meta">    while(n/=10) ten*=10,++lv;\</span></span><br><span class="line"><span class="meta">    while(--lv)&#123;\</span></span><br><span class="line"><span class="meta">        putchar(m/ten+<span class="string">&#x27;0&#x27;</span>);\</span></span><br><span class="line"><span class="meta">        m%=ten;ten/=10;++i;&#125;\</span></span><br><span class="line"><span class="meta">&#125;   <span class="comment">//  int lv=2;与--lv呼应。</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _putu_(n)&#123;\</span></span><br><span class="line"><span class="meta">    ull ten=1,lv=2,m=n;\</span></span><br><span class="line"><span class="meta">    while(n/=10) ten*=10,++lv;\</span></span><br><span class="line"><span class="meta">    while(--lv)&#123;\</span></span><br><span class="line"><span class="meta">        putchar(m/ten+<span class="string">&#x27;0&#x27;</span>);\</span></span><br><span class="line"><span class="meta">        m%=ten;ten/=10;&#125;\</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _rapCHECK1_(q)&#123;\</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(q.splfd!=1) q=lrsplfy(q);\</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(!q.down)&#123;\</span></span><br><span class="line"><span class="meta">        switch(q.up)&#123;\</span></span><br><span class="line"><span class="meta">            case -1: fputs(<span class="string">&quot;-inf&quot;</span>,stdout);return 4;\</span></span><br><span class="line"><span class="meta">            case 0: fputs(<span class="string">&quot;NaN&quot;</span>,stdout);return 3;\</span></span><br><span class="line"><span class="meta">            case 1: fputs(<span class="string">&quot;+inf&quot;</span>,stdout);return 4;\</span></span><br><span class="line"><span class="meta">        &#125;\</span></span><br><span class="line"><span class="meta">    &#125;\</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _rapCHECK2_(q)&#123;\</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(q.splfd!=1) q=lrsplfy(q);\</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(!q.down)&#123;\</span></span><br><span class="line"><span class="meta">        switch(q.up)&#123;\</span></span><br><span class="line"><span class="meta">            case -1: fputs(<span class="string">&quot;-inf&quot;</span>,stdout);break;\</span></span><br><span class="line"><span class="meta">            case 0: fputs(<span class="string">&quot;NaN&quot;</span>,stdout);break;\</span></span><br><span class="line"><span class="meta">            case 1: fputs(<span class="string">&quot;+inf&quot;</span>,stdout);break;\</span></span><br><span class="line"><span class="meta">        &#125;   return 0;\</span></span><br><span class="line"><span class="meta">    &#125;\</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _isBLANK_(ch) (ch==<span class="string">&#x27; &#x27;</span>||ch==<span class="string">&#x27;\n&#x27;</span>||ch==<span class="string">&#x27;\t&#x27;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _isDIGIT_(ch) (ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _ADD_digit_(n,temp) while(_isDIGIT_(temp)) &#123;n=n*10+temp-<span class="string">&#x27;0&#x27;</span>; temp=getchar();&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _point_ADD_digit_(up,down,temp) while(_isDIGIT_(temp)) &#123;up=up*10+temp-<span class="string">&#x27;0&#x27;</span>; down*=10; temp=getchar();&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _SHOULD_END_1_(q,temp) <span class="keyword">if</span>(temp!=<span class="string">&#x27;/&#x27;</span>&amp;&amp;temp!=<span class="string">&#x27;.&#x27;</span>) &#123;ungetc(temp,stdin); q.up*=pozneg; return q;&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _SHOULD_END_2_(q,temp) <span class="keyword">if</span>(temp!=<span class="string">&#x27;(&#x27;</span>) &#123;ungetc(temp,stdin); q.up*=pozneg; return q;&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _SHOULD_END_3_(q,temp) <span class="keyword">if</span>(temp!=<span class="string">&#x27;/&#x27;</span>) &#123;ungetc(temp,stdin); q.up*=pozneg; return q;&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _SHOULD_END_4_(q,temp) <span class="keyword">if</span>(temp!=<span class="string">&#x27;.&#x27;</span>) &#123;ungetc(temp,stdin); q.up*=pozneg; return q;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  函数实现和相关解释说明：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rational.c&quot;</span></span></span><br><span class="line"><span class="comment">//  请将.h.c放在同一目录下。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> ul</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> ull</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> lr</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _putu_ppi_</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _putu_</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _rapCHECK1_</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _rapCHECK2_</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _isBLANK_</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _isDIGIT_</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _ADD_digit_</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _point_ADD_digit_</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _SHOULD_END_1_</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _SHOULD_END_2_</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _SHOULD_END_3_</span></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> _SHOULD_END_4_</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h1 id="ration-c-文件内容"><a href="#ration-c-文件内容" class="headerlink" title="ration.c 文件内容"></a>ration.c 文件内容</h1><pre><code class="language-c">//  在_AUTO_RAT_TYPE_模式下，为了让函数同时支持不同精度的rat，本库使用\
    了大量的糖衣宏，展开后，单个rat变成多个，如果它是函数的返回值，就造成\
    不必要的重复调用，故不推荐在 自动类型模式 嵌套函数（尤其是get(l)rat）。
//  默认模式，即 手动类型 模式下，您可随意做函数的嵌套。
#ifdef _AUTO_RAT_TYPE_
    /*过渡为 rat*/
rat _rat_(int up,unsigned down,char splfd) &#123;rat q=&#123;up,down,splfd&#125;; return q;&#125;
#define _RAT_(q) _rat_((q).up,(q).down,(q).splfd)
    /*过渡为 longrat*/
lr _lr_(ll up,ull down,char splfd) &#123;lr q=&#123;up,down,splfd&#125;; return q;&#125;
#define _LR_(q) _lr_((q).up,(q).down,(q).splfd)
//  以上是自动模式下的 隐藏函数 和 糖衣宏。
#endif


    /*longrat 转为 rat*/
rat torat(lr qq) &#123;rat q=&#123;qq.up,qq.down,qq.splfd&#125;; return q;&#125;
    /*rat 转为 longrat*/
lr tolr(rat q) &#123;lr qq=&#123;q.up,q.down,q.splfd&#125;; return qq;&#125;


//  返回值非负，且有gcd(0,n)==gcd(n,0)==n。
    /*最大公约数*/
ll gcd(ll a,ll b)&#123;
    ll temp;
    while(b)
        temp=a%b,a=b,b=temp;
    return a&lt;0 ? -a:a;
&#125;
//  返回值非负，认为0与任何数的最小公倍数为0。
    /*最小公倍数*/
ull lcm(ll a,ll b)&#123;
    if(!a||!b) return 0;
    if(a&lt;0) a=-a;
    if(b&lt;0) b=-b;
    ull aa=a,bb=b,temp;
    while(bb)
        temp=aa%bb,aa=bb,bb=temp;
    return a/aa*b;
&#125;


//  做运算的有理数必须经过splfy(simplify)\
    检查，它使用形参，并有权更改rat.splfd。
    /*longrat 约分*/
lr lrsplfy(lr q)&#123;
//  无需化简，立即返回。
    if(q.splfd==1) return q;
    if(q.down==1) return q.splfd=1,q;
//  单独处理uncertain的情况。
    if(!q.up&amp;&amp;!q.down)
    return lrUNCERTAIN;
//  正无穷和负无穷能够被归纳。
    ll temp=gcd(q.up,q.down);
        q.up/=temp;
        q.down/=temp;
        q.splfd=1;
    return q;
&#125;
    /*rat 约分*/
rat rsplfy(rat q)&#123;
    if(q.splfd==1) return q;
    if(q.down==1) return q.splfd=1,q;
    if(!q.up&amp;&amp;!q.down)
    return rUNCERTAIN;
    int temp=gcd(q.up,q.down);
        q.up/=temp;
        q.down/=temp;
        q.splfd=1;
    return q;
&#125;
#ifdef _AUTO_RAT_TYPE_
    /*longrat 约分*/
#define lrsplfy(q) lrsplfy(_LR_(q))
    /*rat 约分*/
#define rsplfy(q) rsplfy(_RAT_(q))
#endif


    /*longrat 加法*/
lr lrplus(lr x,lr y)&#123;
    if(x.splfd!=1) x=lrsplfy(x);
    if(y.splfd!=1) y=lrsplfy(y);
//  分母为零的无值分数。
    if(!x.down||!y.down)&#123;
        //只有一个无值分数则返回它。
        if(x.down) return y;
        if(y.down) return x;
        //认为同种无值分数之和不变。
        if(x.up==y.up) return x;
        //不同的无值分数和为不定态。
        else return lrUNCERTAIN;
    &#125;
//  单独处理同分母。
    if(x.down==y.down)&#123;
        x.up+=y.up;
//  各处强制化简前必将splfd置零。
        if(x.down!=1)&#123;
            x.splfd=0;
            return lrsplfy(x);
        &#125;else return x;
    &#125;
//  其中一方为零，立即返回另一方。
    if(!x.up)   return y;
    if(!y.up)   return x;
    unsigned temp=lcm(x.down,y.down);
    x.up=(int)(temp/x.down)*x.up
        +(int)(temp/y.down)*y.up;
    x.down=temp;
    return x.splfd=0,lrsplfy(x);
&#125;
    /*rat 加法*/
rat rplus(rat x,rat y)&#123;
    lr  xx=&#123;x.up,x.down,x.splfd&#125;,
        yy=&#123;y.up,y.down,y.splfd&#125;;
    xx=lrplus(xx,yy);
    rat res=&#123;xx.up,xx.down,xx.splfd&#125;;
    return res;
&#125;
#ifdef _AUTO_RAT_TYPE_
    /*longrat 加法*/
#define lrplus(x,y) lrplus(_LR_(x),_LR_(y))
    /*rat 加法*/
#define rplus(x,y) rplus(_RAT_(x),_RAT_(y))
#endif


    /*longrat 求负*/
lr lrneg(lr q) &#123;return q.up=-q.up,q;&#125;
    /*rat 求负*/
rat rneg(rat q) &#123;return q.up=-q.up,q;&#125;
#ifdef _AUTO_RAT_TYPE_
    /*longrat 求负*/
#define lrneg(q) lrneg(_LR_(q))
    /*rat 求负*/
#define rneg(q) rneg(_RAT_(q))
#endif


    /*long rat减法*/
#define lrminus(x,y) lrplus(x,lrneg(y))
    /*rat 减法*/
#define rminus(x,y) rplus(x,rneg(y))


    /*longrat 乘法*/
lr lrtime(lr x,lr y)&#123;
    if(x.splfd!=1) x=lrsplfy(x);
    if(y.splfd!=1) y=lrsplfy(y);
//  分母为零的无值分数。
    if(!x.down||!y.down)&#123;
//  这三行涉及复杂的分类讨论。
        if(!x.up||!y.up) return lrUNCERTAIN;
        if(x.up&gt;0 ^ y.up&gt;0) return lrNEGINF;
        else return lrINF; //同号得正，异号得负。
    &#125;
//  单独处理整数乘法。
    if(x.down==1==y.down) return x.up*=y.up,x;
    ll temp;
    if(temp=gcd(x.up,y.down),temp!=1)   x.up/=temp,y.down/=temp;
    if(temp=gcd(y.up,x.down),temp!=1)   y.up/=temp,x.down/=temp;
    x.up*=y.up;     x.down*=y.down;     return x;
&#125;
    /*rat 乘法*/
rat rtime(rat x,rat y)&#123;
    lr  xx=&#123;x.up,x.down,x.splfd&#125;,
        yy=&#123;y.up,y.down,y.splfd&#125;;
    xx=lrtime(xx,yy);
    rat res=&#123;xx.up,xx.down,xx.splfd&#125;;
    return res;
&#125;
#ifdef _AUTO_RAT_TYPE_
    /*longrat 乘法*/
#define lrtime(x,y) lrtime(_LR_(x),_LR_(y))
    /*rat 乘法*/
#define rtime(x,y) rtime(_RAT_(x),_RAT_(y))
#endif


//  认为无穷的倒数为0，0的倒数为正无穷，不定态的倒数为不定态。
    /*longrat 倒数*/
lr lrflip(lr q)&#123;
    if(q.splfd!=1) lrsplfy(q);
    char minus=0; ll temp;
//  鉴于分母类型为ull，引入minus记录正负性。
    if(q.up&lt;0)
        q.up=-q.up,minus=1;
    temp=q.up;
    q.up=q.down;
    q.down=temp;
    if(minus) q.up=-q.up;
    return q;
&#125;
    /*rat 倒数*/
rat rflip(rat q)&#123;
    if(q.splfd!=1) rsplfy(q);
    char minus=0; int temp;
    if(q.up&lt;0)
        q.up=-q.up,minus=1;
    temp=q.up;
    q.up=q.down;
    q.down=temp;
    if(minus) q.up=-q.up;
    return q;
&#125;
#ifdef _AUTO_RAT_TYPE_
    /*longrat 倒数*/
#define lrflip(q) lrflip(_LR_(q))
    /*rat 倒数*/
#define rflip(q) rflip(_RAT_(q))
#endif


    /*longrat 除法*/
lr lrdivi(lr x,lr y)&#123;
    char minus=0; ll temp;
    if(y.up&lt;0)
        y.up=-y.up,minus=1;
    temp=y.up;
    y.up=y.down;
    y.down=temp;
    if(minus) y.up=-y.up;
    return lrtime(x,y);
&#125;
    /*rat 除法*/
rat rdivi(rat x,rat y)&#123;
    char minus=0; int temp;
    if(y.up&lt;0)
        y.up=-y.up,minus=1;
    temp=y.up;
    y.up=y.down;
    y.down=temp;
    if(minus) y.up=-y.up;
    return rtime(x,y);
&#125;
#ifdef _AUTO_RAT_TYPE_
    /*longrat 除法*/
#define lrdivi(x,y) lrdivi(_LR_(x),_LR_(y))
    /*rat 除法*/
#define rdivi(x,y) rdivi(_RAT_(x),_RAT_(y))
#endif


//  (char)ch可以取加减乘除号。
    /*calc of 2 longrats 运算包*/
lr co2lr(lr x,char ch,lr y)&#123;
    switch(ch)&#123;
        case &#39;+&#39;:return lrplus(x,y);
        case &#39;-&#39;:return lrminus(x,y);
        case &#39;*&#39;:return lrtime(x,y);
        case &#39;/&#39;:return lrdivi(x,y);
        default :return lrUNCERTAIN;
    &#125;
&#125;
    /*calc of 2 rats 运算包*/
rat co2r(rat x,char ch,rat y)&#123;
    switch(ch)&#123;
        case &#39;+&#39;:return rplus(x,y);
        case &#39;-&#39;:return rminus(x,y);
        case &#39;*&#39;:return rtime(x,y);
        case &#39;/&#39;:return rdivi(x,y);
        default :return rUNCERTAIN;
    &#125;
&#125;
#ifdef _AUTO_RAT_TYPE_
    /*calc of 2 longrats 运算包*/
#define co2lr(x,ch,y) co2lr(_LR_(x),ch,_LR_(y))
    /*calc of 2 rats 运算包*/
#define co2r(x,ch,y) co2r(_RAT_(x),ch,_RAT_(y))
#endif


    /*rat 绝对值*/
rat rabs(rat q)
    &#123;return q.up&gt;=0 ? q:(q.up=-q.up,q);&#125;
    /*longrat 绝对值*/
lr lrabs(lr q)
    &#123;return q.up&gt;=0 ? q:(q.up=-q.up,q);&#125;
#ifdef _AUTO_RAT_TYPE_
    /*longrat 绝对值*/
#define lrabs(q) lrabs(_LR_(q))
    /*rat 绝对值*/
#define rabs(q) rabs(_RAT_(q))
#endif


//  &quot;&gt;&quot;-&gt;1, &quot;==&quot;-&gt;0, &quot;&lt;&quot;-&gt;-1.
//  认为无穷和不定态等于自身，且不定态等于任何值。
    /*longrat 比较大小*/
signed char lrcmp(lr x,lr y)&#123;
    if(x.up&gt;0 ^ y.up&gt;0)
        return x.up&gt;y.up ? 1:-1;
//  以上防止出现不必要的计算和溢出。
    ll res=lrminus(x,y).up;
    if(res&gt;0)   return 1;
    if(0==res)  return 0;
    if(res&lt;0)   return -1;
&#125;
    /*rat 比较大小*/
signed char rcmp(rat x,rat y)&#123;
    if(x.up&gt;0 ^ y.up&gt;0)
        return x.up&gt;y.up ? 1:-1;
//  以上防止出现不必要的计算和溢出。
    int res=rminus(x,y).up;
    if(res&gt;0)   return 1;
    if(0==res)  return 0;
    if(res&lt;0)   return -1;
&#125;
#ifdef _AUTO_RAT_TYPE_
    /*longrat 比较大小*/
#define lrcmp(x,y) lrcmp(_LR_(x),_LR_(y))
    /*rat 比较大小*/
#define rcmp(x,y) rcmp(_RAT_(x),_RAT_(y))
#endif


//  longrat print，返回输出字符个数。
    /*longrat 分数输出*/
char lrap(lr q)&#123;
    _rapCHECK1_(q)
//  rapCHECK宏包含化简检查、无值分数输出。
    char i=0;
    if(q.up&lt;0)
        q.up=-q.up,
        putchar(&#39;-&#39;),
        ++i;
    _putu_ppi_(q.up,i)
    if(q.down==1) return i;
//  分数线前后。
    putchar(&#39;/&#39;); ++i;
    _putu_ppi_(q.down,i)
    return i;
&#125;
//  rat print，返回输出字符个数。
    /*rat 分数输出*/
char rap(rat q)&#123;
    lr qq=&#123;q.up,q.down,q.splfd&#125;;
    return lrap(qq);
&#125;
#ifdef _AUTO_RAT_TYPE_
    /*longrat 分数输出*/
#define lrap(q) lrap(_LR_(q))
    /*rat 分数输出*/
#define rap(q) rap(_RAT_(q))
#endif


//  float longrat print，返回输出字符个数。
    /*longrat 指定小数位数输出*/
int fltlrap(lr q,int n)&#123;
    _rapCHECK1_(q)
    int i=0; ll temp;
    if(q.up&lt;0)
        q.up=-q.up,
        putchar(&#39;-&#39;),
        ++i;
    if(q.up&gt;=q.down)&#123;
        temp=q.up/q.down;
        _putu_ppi_(temp,i);
        q.up%=q.down;
    &#125;else putchar(&#39;0&#39;),++i;
//  与下方的--n呼应，提速并剔除负精度。
    if(++n==1) return i;
    if(n&lt;1) n=7; //遇负精度，输出六位。
    putchar(&#39;.&#39;);++i;
    while(--n)
        q.up*=10,++i,
        putchar(q.up/q.down+&#39;0&#39;),
        q.up%=q.down;
    return i;
&#125;
    /*rat 指定小数位数输出*/
int fltrap(rat q,int n)&#123;
    lr qq=&#123;q.up,q.down,q.splfd&#125;;
    return fltlrap(qq,n);
&#125;
#ifdef _AUTO_RAT_TYPE_
    /*longrat 指定小数位数输出*/
#define fltlrap(q,n) fltlrap(_LR_(q),n)
    /*rat 指定小数位数输出*/
#define fltrap(q,n) fltrap(_RAT_(q),n)
#endif


//  返回循环节长度，支持输出long long级长度的循环节。
    /*longrat 小数输出*/
ll lrdeci(lr q)&#123;
    _rapCHECK2_(q)
    if(q.up&lt;0)
        putchar(&#39;-&#39;),
        q.up=-q.up;
    ull temp;
    if(q.up&gt;=q.down)&#123;
        temp=q.up/q.down;
        _putu_(temp);
        q.up%=q.down;
    &#125;else putchar(&#39;0&#39;);
    if(!q.up) return 0;

    putchar(&#39;.&#39;);
    temp=q.down;
    ll n1=0,n2=0;
//  根据数论的结论，分母中包含因数5或2的个数，\
    决定了混循环小数的小数点与循环节间“废位”数。
    while(! (temp%5))   ++n1,temp/=5;
    while(! (temp%2))   ++n2,temp/=2;
    if(n2&gt;n1) n1=n2;    //n1存放废位长度。

    for(char i=0;i&lt;n1;++i)&#123;
        q.up*=10;
        putchar(q.up/q.down+&#39;0&#39;);
        q.up%=q.down;
    &#125;   n1=q.up*10;
//  发现是有限小数，截停。
    if(!(n1%q.down))return 0;

    putchar(&#39;(&#39;);   putchar(n1/q.down+&#39;0&#39;);
    n1%=q.down;     n2=1;
//  q.up存放循环节首余数，n2记录循环节长度。
    while(n1!=q.up)&#123;
        putchar(n1*10/q.down+&#39;0&#39;);
        ++n2;
        n1=n1*10%q.down;
    &#125;   putchar(&#39;)&#39;);
    return n2;
&#125;
    /*rat 小数输出*/
int rdeci(rat q)&#123;
    lr qq=&#123;q.up,q.down,q.splfd&#125;;
    return lrdeci(qq);
&#125;
#ifdef _AUTO_RAT_TYPE_
    /*longrat 小数输出*/
#define lrdeci(q) lrdeci(_LR_(q))
    /*rat 小数输出*/
#define rdeci(q) rdeci(_RAT_(q))
#endif


//  支持分数形式和（循环）小数形式，用 *英文* 括号标出循环节。
//  getlr丢弃前导空白符，开头若连续出现多个负号，则视为一个，\
    遇到 无关字符 或右括号&#39;)&#39;停止输入，不吸收无关字符，吸收&#39;)&#39;。
//  getlr支持小数点前后、分数线前后缺失。当分子或分母缺失时，\
    getlr默认它（们）为 *1*。遇到无效输入，getlr返回 不定态。\
    另外，getlr不支持&quot;inf&quot;&quot;+inf&quot;&quot;-inf&quot;&quot;NaN&quot;之类输入，请用\
    &quot;1/0&quot;&quot;-1/0&quot;&quot;0/0&quot;的分数形式代表它们。
//  为了提高效率，getlr()基于getchar()书写，不支持反斜线，不\
    支持全角数字，您也可以做修改。
    /*longrat 综合输入*/
lr getlr()&#123;
    lr q=lrZERO; char temp;
//  pozneg记录正负性，赋初值为1。
    signed char pozneg=1;
//  丢弃开头的空白字符，包括换行。
    do temp=getchar();
    while(_isBLANK_(temp));
    _reset_:switch(temp)&#123;
        case &#39;-&#39;: pozneg=-1; temp=getchar(); goto _reset_;
        case &#39;.&#39;: goto _afterpoint_;
        case &#39;/&#39;: q.up=1; goto _afterslash_;
        default : if(!_isDIGIT_(temp))&#123;
            ungetc(temp,stdin);
            return lrUNCERTAIN;
    &#125;&#125;
//  记录分子或整数部分，直到出现非数字。
    _ADD_digit_(q.up,temp)
//  遇到无关字符，整理正负性并输出。
    _SHOULD_END_1_(q,temp)
//  如果遇到分数线……
    if(temp==&#39;/&#39;)&#123; _afterslash_:;
        signed char pzng=1;
        _reget_: temp=getchar();
        if(temp==&#39;-&#39;)
            &#123;pzng=-1;goto _reget_;&#125;
        if(_isDIGIT_(temp))
            q.down=0;
        _ADD_digit_(q.down,temp)
        ungetc(temp,stdin);
//  整理正负性。
        if(pozneg!=pzng)
            q.up=-q.up;
//  强制化简。
        q.splfd=0;
        return lrsplfy(q);
    &#125;
//  如果遇到小数点……
    if(temp==&#39;.&#39;)&#123; _afterpoint_:;
        lr qq=lrZERO;
        ull down=1;
        temp=getchar();
//  记录非循环小数部分。
        _point_ADD_digit_(qq.up,down,temp)
        qq.down=down;
        qq.splfd=0; //须强制化简。
        q=lrplus(q,qq);
//  遇到无关字符，整理正负性并输出。
        _SHOULD_END_2_(q,temp)
//  遇到了左括号，还需要处理循环节。
        qq=lrZERO;
        temp=getchar();
        _point_ADD_digit_(qq.up,qq.down,temp)
        if(temp!=&#39;)&#39;)
            ungetc(temp,stdin);
//  防止括号间无内容。
        if(qq.down!=1)
//  为了衔接循环部分，down储存了数量级。
            qq.down=(qq.down-1)*down,
            qq.splfd=0,
            q=lrplus(q,qq);
//  整理正负性，q已化简过。
        q.up*=pozneg;
        return q;
    &#125;
&#125;
    /*rat 综合输入*/
rat getrat()&#123;
    lr qq=getlr();
    rat q=&#123;qq.up,qq.down,qq.splfd&#125;;
    return q;
&#125;
//  以下四个函数为功能分裂产物。
    /*longrat 分数输入*/
lr getlfrac()&#123;
    lr q=lrZERO; char temp;
    signed char pozneg=1;
    do temp=getchar();
    while(_isBLANK_(temp));
    _reset_:switch(temp)&#123;
        case &#39;-&#39;: pozneg=-1; temp=getchar(); goto _reset_;
        case &#39;/&#39;: q.up=1; goto _afterslash_;
        default : if(!_isDIGIT_(temp))&#123;
            ungetc(temp,stdin);
            return lrUNCERTAIN;
    &#125;&#125;
    _ADD_digit_(q.up,temp)
    _SHOULD_END_3_(q,temp)

    _afterslash_:;
    signed char pzng=1;
    _reget_: temp=getchar();
    if(temp==&#39;-&#39;)
        &#123;pzng=-1;goto _reget_;&#125;
    if(_isDIGIT_(temp))
        q.down=0;
    _ADD_digit_(q.down,temp)
    ungetc(temp,stdin);
    if(pozneg!=pzng)
        q.up=-q.up;
    q.splfd=0;
    return lrsplfy(q);
&#125;
    /*rat 分数输入*/
rat getfrac()&#123;
    lr qq=getlfrac();
    rat q=&#123;qq.up,qq.down,qq.splfd&#125;;
    return q;
&#125;
    /*longrat 小数输入*/
lr getldeci()&#123;
    lr q=lrZERO; char temp;
    signed char pozneg=1;
    do temp=getchar();
    while(_isBLANK_(temp));
    _reset_:switch(temp)&#123;
        case &#39;-&#39;: pozneg=-1; temp=getchar(); goto _reset_;
        case &#39;.&#39;: goto _afterpoint_;
        default : if(!_isDIGIT_(temp))&#123;
            ungetc(temp,stdin);
            return lrUNCERTAIN;
    &#125;&#125;
    _ADD_digit_(q.up,temp)
    _SHOULD_END_4_(q,temp)

    _afterpoint_:;
    lr qq=lrZERO;
    ull down=1;
    temp=getchar();
    _point_ADD_digit_(qq.up,down,temp)
    qq.down=down;
    qq.splfd=0;
    q=lrplus(q,qq);
    _SHOULD_END_2_(q,temp)
    qq=lrZERO;
    temp=getchar();
    _point_ADD_digit_(qq.up,qq.down,temp)
    if(temp!=&#39;)&#39;)
    ungetc(temp,stdin);
    if(qq.down!=1)
    qq.down=(qq.down-1)*down,
    qq.splfd=0,
    q=lrplus(q,qq);
    q.up*=pozneg;
    return q;
&#125;
    /*rat 小数输入*/
rat getdeci()&#123;
    lr qq=getldeci();
    rat q=&#123;qq.up,qq.down,qq.splfd&#125;;
    return q;
&#125;


    /*longrat 化为 double*/
double lrtodb(lr q)
    &#123;return q.up/(double)q.down;&#125;
    /*rat 化为 double*/
double rattodb(rat q)
    &#123;return q.up/(double)q.down;&#125;
#ifdef _AUTO_RAT_TYPE_
    /*longrat 化为 double*/
#define lrtodb(q) lrtodb(_LR_(q))
    /*rat 化为 double*/
#define rattodb(q) rattodb(_RAT_(q))
#endif


//  以int边界代替所谓的无穷，认为rUNCERTAIN对应0。
    /*rat 化为整数*/
int rattoint(rat q)&#123;
    if(!q.down)&#123;
        if(!q.up)   return 0;
        if(q.up&gt;0)  return INT_MAX;
        if(q.up&lt;0)  return INT_MIN;
    &#125;
    return q.up/(int)q.down;
&#125;
#ifdef _AUTO_RAT_TYPE_
    /*rat 化为整数*/
#define rattoint(q) rattoint(_RAT_(q))
#endif


//  以边界代替所谓的无穷，认为lrUNCERTAIN对应0。
#if INT_MAX &lt; LONG_MAX
    /*longrat 化为整数*/
long lrtolong(lr q)&#123;
    if(!q.down)&#123;
        if(!q.up)   return 0;
        if(q.up&gt;0)  return LONG_MAX;
        if(q.up&lt;0)  return LONG_MIN;
    &#125;
    return q.up/(long)q.down;
&#125;
#ifdef _AUTO_RAT_TYPE_
    /*longrat 化为整数*/
#define lrtolong(q) lrtolong(_LR_(q))
#endif
#else
    /*longrat 化为整数*/
ll lrtoll(lr q)&#123;
    if(!q.down)&#123;
        if(!q.up)   return 0;
        if(q.up&gt;0)  return LONG_LONG_MAX;
        if(q.up&lt;0)  return LONG_LONG_MIN;
    &#125;
    return q.up/(ll)q.down;
&#125;
#ifdef _AUTO_RAT_TYPE_
    /*longrat 化为整数*/
#define lrtoll(q) lrtoll(_LR_(q))
#endif
</code></pre>
]]></content>
      <categories>
        <category>C语言库文件</category>
      </categories>
      <tags>
        <tag>分数</tag>
      </tags>
  </entry>
</search>
